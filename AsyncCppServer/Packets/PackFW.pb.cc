// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PackFW.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PackFW.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtobufPackets {
class PackHeaderInDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PackHeaderIn> {};
PackHeaderInDefaultTypeInternal _PackHeaderIn_default_instance_;
class PackHeaderOutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PackHeaderOut> {};
PackHeaderOutDefaultTypeInternal _PackHeaderOut_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_PackFW_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_PackFW_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackHeaderIn, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackHeaderIn, serverread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackHeaderIn, lockey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackHeaderIn, sendtoids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackHeaderIn, datasize_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackHeaderOut, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackHeaderOut, lockey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackHeaderOut, sentfromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackHeaderOut, datasize_),
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PackHeaderIn)},
  { 8, -1, sizeof(PackHeaderOut)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_PackHeaderIn_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_PackHeaderOut_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_PackFW_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "PackFW.proto", schemas, file_default_instances, protobuf_Offsets_PackFW_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void protobuf_ShutdownFile_PackFW_2eproto() {
  _PackHeaderIn_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PackHeaderOut_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void protobuf_InitDefaults_PackFW_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PackHeaderIn_default_instance_.DefaultConstruct();
  _PackHeaderOut_default_instance_.DefaultConstruct();
}

void protobuf_InitDefaults_PackFW_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_PackFW_2eproto_impl);
}
void protobuf_AddDesc_PackFW_2eproto_impl() {
  protobuf_InitDefaults_PackFW_2eproto();
  static const char descriptor[] = {
      "\n\014PackFW.proto\022\017ProtobufPackets\"W\n\014PackH"
      "eaderIn\022\022\n\nserverRead\030\001 \001(\010\022\016\n\006locKey\030\002 "
      "\001(\t\022\021\n\tsendToIDs\030\003 \003(\r\022\020\n\010dataSize\030\004 \001(\r"
      "\"E\n\rPackHeaderOut\022\016\n\006locKey\030\001 \001(\t\022\022\n\nsen"
      "tFromID\030\002 \001(\r\022\020\n\010dataSize\030\003 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 199);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PackFW.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PackFW_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PackFW_2eproto_once_);
void protobuf_AddDesc_PackFW_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PackFW_2eproto_once_,
                 &protobuf_AddDesc_PackFW_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PackFW_2eproto {
  StaticDescriptorInitializer_PackFW_2eproto() {
    protobuf_AddDesc_PackFW_2eproto();
  }
} static_descriptor_initializer_PackFW_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackHeaderIn::kServerReadFieldNumber;
const int PackHeaderIn::kLocKeyFieldNumber;
const int PackHeaderIn::kSendToIDsFieldNumber;
const int PackHeaderIn::kDataSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackHeaderIn::PackHeaderIn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_PackFW_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtobufPackets.PackHeaderIn)
}
PackHeaderIn::PackHeaderIn(const PackHeaderIn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sendtoids_(from.sendtoids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lockey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lockey().size() > 0) {
    lockey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lockey_);
  }
  ::memcpy(&serverread_, &from.serverread_,
    reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&serverread_) + sizeof(datasize_));
  // @@protoc_insertion_point(copy_constructor:ProtobufPackets.PackHeaderIn)
}

void PackHeaderIn::SharedCtor() {
  lockey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverread_, 0, reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&serverread_) + sizeof(datasize_));
  _cached_size_ = 0;
}

PackHeaderIn::~PackHeaderIn() {
  // @@protoc_insertion_point(destructor:ProtobufPackets.PackHeaderIn)
  SharedDtor();
}

void PackHeaderIn::SharedDtor() {
  lockey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PackHeaderIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackHeaderIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const PackHeaderIn& PackHeaderIn::default_instance() {
  protobuf_InitDefaults_PackFW_2eproto();
  return *internal_default_instance();
}

PackHeaderIn* PackHeaderIn::New(::google::protobuf::Arena* arena) const {
  PackHeaderIn* n = new PackHeaderIn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackHeaderIn::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtobufPackets.PackHeaderIn)
  sendtoids_.Clear();
  lockey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverread_, 0, reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&serverread_) + sizeof(datasize_));
}

bool PackHeaderIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtobufPackets.PackHeaderIn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool serverRead = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &serverread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string locKey = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lockey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lockey().data(), this->lockey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ProtobufPackets.PackHeaderIn.locKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sendToIDs = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sendtoids())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_sendtoids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dataSize = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtobufPackets.PackHeaderIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtobufPackets.PackHeaderIn)
  return false;
#undef DO_
}

void PackHeaderIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtobufPackets.PackHeaderIn)
  // bool serverRead = 1;
  if (this->serverread() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->serverread(), output);
  }

  // string locKey = 2;
  if (this->lockey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lockey().data(), this->lockey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProtobufPackets.PackHeaderIn.locKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lockey(), output);
  }

  // repeated uint32 sendToIDs = 3;
  if (this->sendtoids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sendtoids_cached_byte_size_);
  }
  for (int i = 0; i < this->sendtoids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->sendtoids(i), output);
  }

  // uint32 dataSize = 4;
  if (this->datasize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->datasize(), output);
  }

  // @@protoc_insertion_point(serialize_end:ProtobufPackets.PackHeaderIn)
}

::google::protobuf::uint8* PackHeaderIn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtobufPackets.PackHeaderIn)
  // bool serverRead = 1;
  if (this->serverread() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->serverread(), target);
  }

  // string locKey = 2;
  if (this->lockey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lockey().data(), this->lockey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProtobufPackets.PackHeaderIn.locKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lockey(), target);
  }

  // repeated uint32 sendToIDs = 3;
  if (this->sendtoids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _sendtoids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sendtoids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->sendtoids(i), target);
  }

  // uint32 dataSize = 4;
  if (this->datasize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->datasize(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ProtobufPackets.PackHeaderIn)
  return target;
}

size_t PackHeaderIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtobufPackets.PackHeaderIn)
  size_t total_size = 0;

  // repeated uint32 sendToIDs = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->sendtoids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sendtoids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sendtoids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string locKey = 2;
  if (this->lockey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lockey());
  }

  // bool serverRead = 1;
  if (this->serverread() != 0) {
    total_size += 1 + 1;
  }

  // uint32 dataSize = 4;
  if (this->datasize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datasize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackHeaderIn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtobufPackets.PackHeaderIn)
  GOOGLE_DCHECK_NE(&from, this);
  const PackHeaderIn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackHeaderIn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtobufPackets.PackHeaderIn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtobufPackets.PackHeaderIn)
    MergeFrom(*source);
  }
}

void PackHeaderIn::MergeFrom(const PackHeaderIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtobufPackets.PackHeaderIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sendtoids_.MergeFrom(from.sendtoids_);
  if (from.lockey().size() > 0) {

    lockey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lockey_);
  }
  if (from.serverread() != 0) {
    set_serverread(from.serverread());
  }
  if (from.datasize() != 0) {
    set_datasize(from.datasize());
  }
}

void PackHeaderIn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtobufPackets.PackHeaderIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackHeaderIn::CopyFrom(const PackHeaderIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtobufPackets.PackHeaderIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackHeaderIn::IsInitialized() const {
  return true;
}

void PackHeaderIn::Swap(PackHeaderIn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackHeaderIn::InternalSwap(PackHeaderIn* other) {
  sendtoids_.UnsafeArenaSwap(&other->sendtoids_);
  lockey_.Swap(&other->lockey_);
  std::swap(serverread_, other->serverread_);
  std::swap(datasize_, other->datasize_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackHeaderIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackHeaderIn

// bool serverRead = 1;
void PackHeaderIn::clear_serverread() {
  serverread_ = false;
}
bool PackHeaderIn::serverread() const {
  // @@protoc_insertion_point(field_get:ProtobufPackets.PackHeaderIn.serverRead)
  return serverread_;
}
void PackHeaderIn::set_serverread(bool value) {
  
  serverread_ = value;
  // @@protoc_insertion_point(field_set:ProtobufPackets.PackHeaderIn.serverRead)
}

// string locKey = 2;
void PackHeaderIn::clear_lockey() {
  lockey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PackHeaderIn::lockey() const {
  // @@protoc_insertion_point(field_get:ProtobufPackets.PackHeaderIn.locKey)
  return lockey_.GetNoArena();
}
void PackHeaderIn::set_lockey(const ::std::string& value) {
  
  lockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufPackets.PackHeaderIn.locKey)
}
void PackHeaderIn::set_lockey(const char* value) {
  
  lockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufPackets.PackHeaderIn.locKey)
}
void PackHeaderIn::set_lockey(const char* value, size_t size) {
  
  lockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufPackets.PackHeaderIn.locKey)
}
::std::string* PackHeaderIn::mutable_lockey() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufPackets.PackHeaderIn.locKey)
  return lockey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackHeaderIn::release_lockey() {
  // @@protoc_insertion_point(field_release:ProtobufPackets.PackHeaderIn.locKey)
  
  return lockey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackHeaderIn::set_allocated_lockey(::std::string* lockey) {
  if (lockey != NULL) {
    
  } else {
    
  }
  lockey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lockey);
  // @@protoc_insertion_point(field_set_allocated:ProtobufPackets.PackHeaderIn.locKey)
}

// repeated uint32 sendToIDs = 3;
int PackHeaderIn::sendtoids_size() const {
  return sendtoids_.size();
}
void PackHeaderIn::clear_sendtoids() {
  sendtoids_.Clear();
}
::google::protobuf::uint32 PackHeaderIn::sendtoids(int index) const {
  // @@protoc_insertion_point(field_get:ProtobufPackets.PackHeaderIn.sendToIDs)
  return sendtoids_.Get(index);
}
void PackHeaderIn::set_sendtoids(int index, ::google::protobuf::uint32 value) {
  sendtoids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtobufPackets.PackHeaderIn.sendToIDs)
}
void PackHeaderIn::add_sendtoids(::google::protobuf::uint32 value) {
  sendtoids_.Add(value);
  // @@protoc_insertion_point(field_add:ProtobufPackets.PackHeaderIn.sendToIDs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PackHeaderIn::sendtoids() const {
  // @@protoc_insertion_point(field_list:ProtobufPackets.PackHeaderIn.sendToIDs)
  return sendtoids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PackHeaderIn::mutable_sendtoids() {
  // @@protoc_insertion_point(field_mutable_list:ProtobufPackets.PackHeaderIn.sendToIDs)
  return &sendtoids_;
}

// uint32 dataSize = 4;
void PackHeaderIn::clear_datasize() {
  datasize_ = 0u;
}
::google::protobuf::uint32 PackHeaderIn::datasize() const {
  // @@protoc_insertion_point(field_get:ProtobufPackets.PackHeaderIn.dataSize)
  return datasize_;
}
void PackHeaderIn::set_datasize(::google::protobuf::uint32 value) {
  
  datasize_ = value;
  // @@protoc_insertion_point(field_set:ProtobufPackets.PackHeaderIn.dataSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackHeaderOut::kLocKeyFieldNumber;
const int PackHeaderOut::kSentFromIDFieldNumber;
const int PackHeaderOut::kDataSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackHeaderOut::PackHeaderOut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_PackFW_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtobufPackets.PackHeaderOut)
}
PackHeaderOut::PackHeaderOut(const PackHeaderOut& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lockey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lockey().size() > 0) {
    lockey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lockey_);
  }
  ::memcpy(&sentfromid_, &from.sentfromid_,
    reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&sentfromid_) + sizeof(datasize_));
  // @@protoc_insertion_point(copy_constructor:ProtobufPackets.PackHeaderOut)
}

void PackHeaderOut::SharedCtor() {
  lockey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sentfromid_, 0, reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&sentfromid_) + sizeof(datasize_));
  _cached_size_ = 0;
}

PackHeaderOut::~PackHeaderOut() {
  // @@protoc_insertion_point(destructor:ProtobufPackets.PackHeaderOut)
  SharedDtor();
}

void PackHeaderOut::SharedDtor() {
  lockey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PackHeaderOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackHeaderOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const PackHeaderOut& PackHeaderOut::default_instance() {
  protobuf_InitDefaults_PackFW_2eproto();
  return *internal_default_instance();
}

PackHeaderOut* PackHeaderOut::New(::google::protobuf::Arena* arena) const {
  PackHeaderOut* n = new PackHeaderOut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackHeaderOut::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtobufPackets.PackHeaderOut)
  lockey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sentfromid_, 0, reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&sentfromid_) + sizeof(datasize_));
}

bool PackHeaderOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtobufPackets.PackHeaderOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string locKey = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lockey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lockey().data(), this->lockey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ProtobufPackets.PackHeaderOut.locKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sentFromID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sentfromid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dataSize = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtobufPackets.PackHeaderOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtobufPackets.PackHeaderOut)
  return false;
#undef DO_
}

void PackHeaderOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtobufPackets.PackHeaderOut)
  // string locKey = 1;
  if (this->lockey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lockey().data(), this->lockey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProtobufPackets.PackHeaderOut.locKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lockey(), output);
  }

  // uint32 sentFromID = 2;
  if (this->sentfromid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sentfromid(), output);
  }

  // uint32 dataSize = 3;
  if (this->datasize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->datasize(), output);
  }

  // @@protoc_insertion_point(serialize_end:ProtobufPackets.PackHeaderOut)
}

::google::protobuf::uint8* PackHeaderOut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProtobufPackets.PackHeaderOut)
  // string locKey = 1;
  if (this->lockey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lockey().data(), this->lockey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProtobufPackets.PackHeaderOut.locKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lockey(), target);
  }

  // uint32 sentFromID = 2;
  if (this->sentfromid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sentfromid(), target);
  }

  // uint32 dataSize = 3;
  if (this->datasize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->datasize(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ProtobufPackets.PackHeaderOut)
  return target;
}

size_t PackHeaderOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtobufPackets.PackHeaderOut)
  size_t total_size = 0;

  // string locKey = 1;
  if (this->lockey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lockey());
  }

  // uint32 sentFromID = 2;
  if (this->sentfromid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sentfromid());
  }

  // uint32 dataSize = 3;
  if (this->datasize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datasize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackHeaderOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtobufPackets.PackHeaderOut)
  GOOGLE_DCHECK_NE(&from, this);
  const PackHeaderOut* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackHeaderOut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtobufPackets.PackHeaderOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtobufPackets.PackHeaderOut)
    MergeFrom(*source);
  }
}

void PackHeaderOut::MergeFrom(const PackHeaderOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtobufPackets.PackHeaderOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.lockey().size() > 0) {

    lockey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lockey_);
  }
  if (from.sentfromid() != 0) {
    set_sentfromid(from.sentfromid());
  }
  if (from.datasize() != 0) {
    set_datasize(from.datasize());
  }
}

void PackHeaderOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtobufPackets.PackHeaderOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackHeaderOut::CopyFrom(const PackHeaderOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtobufPackets.PackHeaderOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackHeaderOut::IsInitialized() const {
  return true;
}

void PackHeaderOut::Swap(PackHeaderOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackHeaderOut::InternalSwap(PackHeaderOut* other) {
  lockey_.Swap(&other->lockey_);
  std::swap(sentfromid_, other->sentfromid_);
  std::swap(datasize_, other->datasize_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackHeaderOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackHeaderOut

// string locKey = 1;
void PackHeaderOut::clear_lockey() {
  lockey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PackHeaderOut::lockey() const {
  // @@protoc_insertion_point(field_get:ProtobufPackets.PackHeaderOut.locKey)
  return lockey_.GetNoArena();
}
void PackHeaderOut::set_lockey(const ::std::string& value) {
  
  lockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtobufPackets.PackHeaderOut.locKey)
}
void PackHeaderOut::set_lockey(const char* value) {
  
  lockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtobufPackets.PackHeaderOut.locKey)
}
void PackHeaderOut::set_lockey(const char* value, size_t size) {
  
  lockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtobufPackets.PackHeaderOut.locKey)
}
::std::string* PackHeaderOut::mutable_lockey() {
  
  // @@protoc_insertion_point(field_mutable:ProtobufPackets.PackHeaderOut.locKey)
  return lockey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackHeaderOut::release_lockey() {
  // @@protoc_insertion_point(field_release:ProtobufPackets.PackHeaderOut.locKey)
  
  return lockey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackHeaderOut::set_allocated_lockey(::std::string* lockey) {
  if (lockey != NULL) {
    
  } else {
    
  }
  lockey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lockey);
  // @@protoc_insertion_point(field_set_allocated:ProtobufPackets.PackHeaderOut.locKey)
}

// uint32 sentFromID = 2;
void PackHeaderOut::clear_sentfromid() {
  sentfromid_ = 0u;
}
::google::protobuf::uint32 PackHeaderOut::sentfromid() const {
  // @@protoc_insertion_point(field_get:ProtobufPackets.PackHeaderOut.sentFromID)
  return sentfromid_;
}
void PackHeaderOut::set_sentfromid(::google::protobuf::uint32 value) {
  
  sentfromid_ = value;
  // @@protoc_insertion_point(field_set:ProtobufPackets.PackHeaderOut.sentFromID)
}

// uint32 dataSize = 3;
void PackHeaderOut::clear_datasize() {
  datasize_ = 0u;
}
::google::protobuf::uint32 PackHeaderOut::datasize() const {
  // @@protoc_insertion_point(field_get:ProtobufPackets.PackHeaderOut.dataSize)
  return datasize_;
}
void PackHeaderOut::set_datasize(::google::protobuf::uint32 value) {
  
  datasize_ = value;
  // @@protoc_insertion_point(field_set:ProtobufPackets.PackHeaderOut.dataSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtobufPackets

// @@protoc_insertion_point(global_scope)
